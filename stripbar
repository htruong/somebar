#!/usr/bin/env python

import socket
import argparse
import serial
import sys
import asyncore
import webcolors
from time import sleep

class Indicator:
	def __init__(self, root, conn, num_leds):
		self.app = root
		self.ser = conn
		self.brightness = 100
		self.numleds = num_leds

	def reset(self):
		for led in range(self.numleds):
			self.set_icon(led, "black")

	def set_icon(self, idx, name):
		col = (0, 0, 0)
		try:
			col = webcolors.name_to_rgb(name)
		except ValueError:
			print 'WTF is', name, '?'
		
		to_write = '{ledidx} {rval} {gval} {bval}'.format(
			ledidx = idx, 
			rval=int(col[0]) * self.brightness / 100, 
			gval=int(col[1]) * self.brightness / 100, 
			bval=int(col[2]) * self.brightness / 100 )

		if self.ser:
			self.ser.write(to_write + '\n')

		print 'Just sent ', to_write

	def set_brightness(self, lvl):
		self.brightness = lvl

class StripBarServer(asyncore.dispatcher):
	def __init__(self, host, port, port_offset, indicator):
		asyncore.dispatcher.__init__(self)
		self.create_socket(socket.AF_INET, socket.SOCK_DGRAM)
		#self.set_reuse_addr()
		self.bind((host, port+port_offset))
		#self.listen(5)
		self.indicator = indicator
		self.port_offset = port_offset
		self.busy_talking = 0

	def handle_read(self):
		s = self.recv(20)
		self.busy_talking = 1
		self.indicator.set_icon(self.port_offset, s)
		self.busy_talking = 0

	def writable(self):
		return bool(self.busy_talking)

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--port', help='Port number', type=int, default=1738)
parser.add_argument('-s', '--serialdev', help='Serial device', default='/dev/ttyUSB0')
parser.add_argument('-d', '--dummyserial', help='Dummy serial device', type=int, default=0)
parser.add_argument('-b', '--baud', help='Baud rate', type=int, default=9600)
parser.add_argument('-l', '--brightness', help='Brightness', type=int, default=100)
parser.add_argument('-n', '--numleds', help='Number of LEDs', type=int, default=1)
parsed_args = parser.parse_args()

HOST = ''   # Symbolic name meaning all available interfaces
PORT = parsed_args.port # Arbitrary non-privileged port
SERDEV = parsed_args.serialdev
BAUD = parsed_args.baud
BRIGHTNESS = parsed_args.brightness
NUMLEDS = parsed_args.numleds
DUMMYSERIAL = parsed_args.dummyserial


# Setup serial device
ser = None
if DUMMYSERIAL == 0:
	ser = serial.Serial(SERDEV, BAUD, timeout=1)


# Setup the indicator
indicator = Indicator('root', ser, NUMLEDS)
indicator.set_brightness(BRIGHTNESS)
indicator.reset()

print 'Opened serial device'

# Datagram (udp) socket
allsocks = [];


for sock_num in range(NUMLEDS):
	try :
		s = StripBarServer(HOST, PORT, sock_num, indicator)
	except socket.error, msg :
		print 'Failed to create socket. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
		sys.exit()

	print 'Socket bind on port', PORT + sock_num, 'complete'
	allsocks.append(s)

print 'All sockets are set up'

asyncore.loop()
